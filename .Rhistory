ggplot2::scale_fill_brewer(palette = "Set2") +
ggplot2::theme(legend.position = "none",
axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)) +
ggplot2::labs(title = titulo, subtitle = p_label, x = x, y = y)
print(g)
invisible(kruskal)
}
utils::globalVariables(c("P.adj"))
teste.kruskal(dados)
#' Teste de Student pareado
#'
#' Realiza o teste t pareado entre dois vetores numéricos emparelhados (ex: antes e depois)
#' e gera gráfico com as médias, desvios padrão e anotação de significância.
#'
#' @param ... Dois vetores numéricos com o mesmo comprimento (ex: antes, depois)
#'            ou um data frame com exatamente duas colunas numéricas
#' @param titulo Título do gráfico (default: "Teste t pareado")
#' @param x Nome do eixo x (default: "Grupo")
#' @param y Nome do eixo y (default: "Valor")
#' @param ajuda Lógico. Se TRUE, exibe explicação detalhada da função (default: FALSE)
#' @param verbose Se TRUE, imprime mensagens detalhadas (default = TRUE)
#' @return Lista invisível com: resumo (médias e desvios), resultado do t.test, gráfico ggplot2
#' @export
teste.t.pareado <- function(..., titulo = "Teste t pareado", x = "Grupo", y = "Valor",
ajuda = FALSE, verbose = TRUE) {
args <- list(...)
# === Entrada via data.frame ===
if (length(args) == 1 && is.data.frame(args[[1]]) && ncol(args[[1]]) == 2) {
grupos <- lapply(args[[1]], function(col) col)
nomes <- colnames(args[[1]])
} else {
grupos <- args
nomes_raw <- as.character(match.call(expand.dots = FALSE)$...)
nomes <- sub("^.*\\$", "", nomes_raw)
}
# === Mensagem de ajuda ===
if (ajuda) {
if (verbose) {
message("
Função teste.t.pareado()
Descrição:
Realiza o teste t pareado para comparar dois conjuntos de medidas relacionadas.
Quando usar:
- Comparar medidas antes e depois no mesmo sujeito.
- Controlar variabilidade intra-indivíduo.
- Comparação de dois grupos dependentes.
Entrada aceita:
- Dois vetores numéricos do mesmo comprimento
- OU um data frame com exatamente duas colunas numéricas
Exemplo:
antes <- c(100, 105, 98, 102)
depois <- c(95, 100, 97, 99)
teste.t.pareado(antes, depois)
# ou
df <- data.frame(antes = c(100,105,98,102), depois = c(95,100,97,99))
teste.t.pareado(df)
")
}
return(invisible(NULL))
}
# === Validação ===
if (length(grupos) != 2 ||
!is.numeric(grupos[[1]]) || !is.numeric(grupos[[2]]) ||
length(grupos[[1]]) != length(grupos[[2]])) {
stop("Erro: forneça exatamente dois vetores numéricos do mesmo comprimento ou um data frame com duas colunas numéricas.")
}
if (!requireNamespace("ggplot2", quietly = TRUE)) {
stop("O pacote ggplot2 não está instalado. Instale com install.packages('ggplot2')")
}
# === Dados ===
A <- grupos[[1]]
B <- grupos[[2]]
valores <- c(A, B)
grupo <- factor(rep(nomes, each = length(A)), levels = nomes)
dados <- data.frame(valor = valores, grupo = grupo)
# === Teste t pareado ===
resultado <- t.test(A, B, paired = TRUE)
pval <- resultado$p.value
# === Resumo ===
resumo <- data.frame(
Grupo = nomes,
Media = c(mean(A), mean(B)),
Desvio_Padrao = c(sd(A), sd(B))
)
p_label <- if (pval < 0.001) "p < 0.001" else paste0("p = ", signif(pval, 3))
signif_label <- if (pval < 0.001) "***" else if (pval < 0.01) "**" else if (pval < 0.05) "*" else ""
if (verbose) {
sep <- paste0(rep("=", 50), collapse = "")
message("Resumo:")
message(sep)
print(resumo)
message(sep)
message("P-valor do teste t pareado: ", p_label)
}
# === Posição da anotação ===
y_pos <- max(valores, na.rm = TRUE) + 0.1 * diff(range(valores, na.rm = TRUE))
# === Gráfico ===
g <- ggplot2::ggplot(dados, ggplot2::aes(x = grupo, y = valor, fill = grupo)) +
ggplot2::geom_boxplot(alpha = 0.7, outlier.shape = NA) +
ggplot2::geom_jitter(width = 0.1, alpha = 0.5, color = "black") +
ggplot2::annotate("text", x = mean(1:2), y = y_pos, label = signif_label, size = 6) +
ggplot2::theme_minimal() +
ggplot2::scale_fill_brewer(palette = "Set2") +
ggplot2::theme(
legend.position = "none",
axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)
) +
ggplot2::labs(title = titulo, subtitle = p_label, x = x, y = y)
print(g)
invisible(list(resumo = resumo, resultado = resultado, grafico = g))
}
dados2 <- as.data.frame(c(dados$controle, dados$tratamento3))
dados2
teste.t.pareado(dados2)
dados2
dados2 <- data.frame(dados2)
teste.t.pareado(dados2)
str(dados2)
dados2
View(dados2)
rm(dados2)
controle <- dados$controle
tratamento <- dados$tratamento3
dados2 <- data.frame(controle, tratamento)
dados2
teste.t.pareado(dados2)
antes <- c(100, 105, 98, 102)
depois <- c(95, 100, 97, 99)
teste.t.pareado(antes, depois)
dados2
teste.t.pareado(dados2)
set.seed(1)
dados2 <- data.frame(
controle = 1:5,
tratamento = 21 + 1:5 + rnorm(5, 0, 0.5)
)
teste.t.pareado(dados2)
#' Teste de Student
#'
#' Realiza o teste t para comparacao de medias entre dois grupos,
#' com verificacoes de normalidade e homogeneidade e apresenta
#' resultado com interpretacao e grafico.
#'
#' @param ... Dois vetores numericos ou uma dataframe com exatamente duas colunas.
#' @param titulo Titulo do grafico (string). Default: "Teste t".
#' @param x Nome do eixo x no grafico (string). Default: "Grupo".
#' @param y Nome do eixo y no grafico (string). Default: "Valor".
#' @param ajuda Logico. Se TRUE, mostra explicacao detalhada da funcao. Default: FALSE.
#' @param verbose Se TRUE, imprime mensagens detalhadas (default = TRUE)
#' @return Lista invisivel com resumo, resultado do teste t e grafico.
#' @export
#'
#' @examples
#' df <- data.frame(
#'   controle = rnorm(30, 10),
#'   tratamento = rnorm(30, 12)
#' )
#' teste.t(df)
teste.t <- function(..., titulo = "Teste t", x = "Grupo", y = "Valor",
ajuda = FALSE, verbose = TRUE) {
args <- list(...)
# --- Ajuda rápida ---
if (ajuda) {
if (verbose) {
message("
Funcao teste.t()
Descricao:
Realiza o teste t de Student para comparar as medias de dois grupos independentes.
Pode receber:
- Dois vetores numericos (ex: grupo1, grupo2)
- Uma dataframe com exatamente duas colunas numericas.
Exemplo:
df <- data.frame(
controle = rnorm(30, 10),
tratamento = rnorm(30, 12)
)
teste.t(df)
")
}
return(invisible(NULL))
}
# --- Detecta se foi passado um data.frame ---
if (length(args) == 1 && is.data.frame(args[[1]])) {
df <- args[[1]]
if (ncol(df) != 2) {
stop("A dataframe deve conter exatamente duas colunas numericas.")
}
grupos <- as.list(df)
nomes <- colnames(df)
} else {
grupos <- args
nomes_raw <- as.character(match.call(expand.dots = FALSE)$...)
nomes <- sub("^.*\\$", "", nomes_raw)
}
# --- Validação ---
if (length(grupos) != 2) {
stop("Forneça exatamente dois grupos ou uma dataframe com duas colunas.")
}
if (!all(sapply(grupos, is.numeric))) {
stop("Ambos os grupos devem ser numericos.")
}
if (any(sapply(grupos, function(g) sd(g, na.rm = TRUE) == 0))) {
stop("Um dos grupos possui variância zero (dados constantes). O teste t não pode ser aplicado.")
}
# --- Checa pacotes ---
pacotes <- c("ggplot2", "dplyr")
for (pkg in pacotes) {
if (!requireNamespace(pkg, quietly = TRUE)) {
stop(paste("O pacote", pkg, "nao esta instalado. Instale com install.packages('", pkg, "')", sep = " "))
}
}
# --- Monta dataframe long ---
valores <- unlist(grupos)
grupo <- factor(rep(nomes, times = sapply(grupos, length)), levels = nomes)
dados <- data.frame(valor = valores, grupo = grupo)
# --- Teste t ---
resultado <- stats::t.test(grupos[[1]], grupos[[2]])
pval <- resultado$p.value
# --- Resumo estatístico ---
resumo <- dados |>
dplyr::group_by(grupo) |>
dplyr::summarise(
Media = round(mean(valor, na.rm = TRUE), 2),
Desvio_Padrao = round(sd(valor, na.rm = TRUE), 2),
.groups = "drop"
)
if (verbose) {
message("\nResumo estatístico por grupo:")
print(resumo)
}
# --- Label de p-valor ---
p_label <- if (pval < 0.001) "p < 0.001" else paste0("p = ", signif(pval, 3))
signif_label <- if (pval < 0.001) "***" else if (pval < 0.01) "**" else if (pval < 0.05) "*" else ""
# --- Posição para anotação ---
y_pos <- max(valores, na.rm = TRUE) + 0.1 * diff(range(valores, na.rm = TRUE))
# --- Gráfico ---
g <- ggplot2::ggplot(dados, ggplot2::aes(x = grupo, y = valor, fill = grupo)) +
ggplot2::geom_boxplot(alpha = 0.7, outlier.shape = NA) +
ggplot2::geom_jitter(width = 0.1, alpha = 0.5, color = "black") +
ggplot2::annotate("text", x = mean(1:2), y = y_pos, label = signif_label, size = 6) +
ggplot2::theme_minimal() +
ggplot2::scale_fill_brewer(palette = "Set2") +
ggplot2::theme(
legend.position = "none",
axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)
) +
ggplot2::labs(
title = titulo,
subtitle = p_label,
x = x,
y = y
)
print(g)
invisible(list(resumo = resumo, resultado = resultado, grafico = g))
}
set.seed(1)
dados2 <- data.frame(
controle = 1:5,
tratamento = 21 + 1:5 + rnorm(5, 0, 0.5)
)
teste.t(dados2)
#' Teste de Mann-Whitney (U)
#'
#' Realiza o teste de Mann-Whitney (Wilcoxon rank-sum) para comparação de dois grupos independentes,
#' com resumo estatístico e visualização gráfica.
#'
#' @param ... Dois vetores numéricos ou um data.frame com duas colunas numéricas.
#' @param titulo Título do gráfico. Default: "Teste de Mann-Whitney".
#' @param x Nome do eixo x no gráfico. Default: "Grupo".
#' @param y Nome do eixo y no gráfico. Default: "Valor".
#' @param ajuda Lógico. Se TRUE, exibe explicação detalhada da função. Default: FALSE.
#' @param verbose Se TRUE, imprime mensagens detalhadas. Default: TRUE.
#'
#' @return Lista invisível com:
#' \describe{
#'   \item{resumo}{Resumo estatístico por grupo}
#'   \item{resultado}{Resultado do teste (objeto htest)}
#'   \item{grafico}{Objeto ggplot2 com a visualização}
#' }
#' @export
#'
#' @examples
#' x <- c(1, 3, 5, 6)
#' y <- c(7, 8, 9, 12)
#' teste.u(x, y)
#'
#' dados <- data.frame(grupoA = x, grupoB = y)
#' teste.u(dados)
teste.u <- function(..., titulo = "Teste de Mann-Whitney", x = "Grupo", y = "Valor",
ajuda = FALSE, verbose = TRUE) {
grupos <- list(...)
# Exibir ajuda se solicitado
if (ajuda || length(grupos) != 2) {
if (verbose) {
message("
Função teste.u()
Descrição:
Realiza o teste de Mann-Whitney (Wilcoxon rank-sum) para comparar dois grupos independentes.
Quando usar:
- Dados não-normais ou ordinais.
- Comparar dois grupos independentes.
- Alternativa não-paramétrica ao teste t.
Exemplos:
x <- c(1, 3, 5, 6)
y <- c(7, 8, 9, 12)
teste.u(x, y)
dados <- data.frame(grupoA = x, grupoB = y)
teste.u(dados)
")
}
return(invisible(NULL))
}
# Verificação de pacotes
pacotes <- c("ggplot2", "dplyr")
for (pkg in pacotes) {
if (!requireNamespace(pkg, quietly = TRUE)) {
stop(paste0("O pacote ", pkg, " não está instalado. Instale com install.packages('", pkg, "')"))
}
}
# Caso o argumento seja um data.frame
if (length(grupos) == 1 && is.data.frame(grupos[[1]])) {
df <- grupos[[1]]
if (ncol(df) != 2)
stop("O data.frame deve conter exatamente duas colunas numéricas.")
if (!all(sapply(df, is.numeric)))
stop("As duas colunas do data.frame devem ser numéricas.")
nomes <- colnames(df)
grupos <- as.list(df)
} else {
# Caso clássico com dois vetores
nomes_raw <- as.character(match.call(expand.dots = FALSE)$...)
nomes <- sub("^.*\\$", "", nomes_raw)
}
# Verificação
if (!all(sapply(grupos, is.numeric))) stop("Todos os grupos devem ser vetores numéricos.")
# Preparar dados longos
valores <- unlist(grupos)
grupo <- factor(rep(nomes, times = sapply(grupos, length)), levels = nomes)
dados <- data.frame(valor = valores, grupo = grupo)
# Teste Mann-Whitney (Wilcoxon rank-sum)
resultado <- stats::wilcox.test(grupos[[1]], grupos[[2]], exact = FALSE)
pval <- resultado$p.value
# Resumo estatístico
resumo <- dados |>
dplyr::group_by(grupo) |>
dplyr::summarise(
Mediana = round(median(valor), 2),
Media = round(mean(valor), 2),
Desvio_Padrao = round(sd(valor), 2),
.groups = "drop"
)
if (verbose) {
message("\nResumo estatístico por grupo:")
print(resumo)
}
# Rótulo do p-valor
p_label <- if (pval < 0.001) "p < 0.001" else paste0("p = ", signif(pval, 3))
signif_label <- if (pval < 0.001) "***" else if (pval < 0.01) "**" else if (pval < 0.05) "*" else ""
# Posição para anotação
y_pos <- max(valores, na.rm = TRUE) + 0.1 * diff(range(valores, na.rm = TRUE))
# Gráfico
g <- ggplot2::ggplot(dados, ggplot2::aes(x = grupo, y = valor, fill = grupo)) +
ggplot2::geom_boxplot(alpha = 0.7, outlier.shape = NA) +
ggplot2::geom_jitter(width = 0.1, alpha = 0.5, color = "black") +
ggplot2::annotate("text", x = mean(1:2), y = y_pos, label = signif_label, size = 6) +
ggplot2::theme_minimal() +
ggplot2::scale_fill_brewer(palette = "Set2") +
ggplot2::theme(
legend.position = "none",
axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)
) +
ggplot2::labs(
title = titulo,
subtitle = p_label,
x = x,
y = y
)
print(g)
invisible(list(resumo = resumo, resultado = resultado, grafico = g))
}
set.seed(1)
dados2 <- data.frame(
controle = 1:5,
tratamento = 21 + 1:5 + rnorm(5, 0, 0.5)
)
teste.u(dados2)
teste.u(antes, depois)
teste.u(dados2)
#' Teste de Mann-Whitney (U)
#'
#' Realiza o teste de Mann-Whitney (Wilcoxon rank-sum) para comparação de dois grupos independentes,
#' com resumo estatístico e visualização gráfica.
#'
#' @param ... Dois vetores numéricos ou um data.frame com duas colunas numéricas.
#' @param titulo Título do gráfico. Default: "Teste de Mann-Whitney".
#' @param x Nome do eixo x no gráfico. Default: "Grupo".
#' @param y Nome do eixo y no gráfico. Default: "Valor".
#' @param ajuda Lógico. Se TRUE, exibe explicação detalhada da função. Default: FALSE.
#' @param verbose Se TRUE, imprime mensagens detalhadas. Default: TRUE.
#'
#' @return Lista invisível com:
#' \describe{
#'   \item{resumo}{Resumo estatístico por grupo}
#'   \item{resultado}{Resultado do teste (objeto htest)}
#'   \item{grafico}{Objeto ggplot2 com a visualização}
#' }
#' @export
#'
#' @examples
#' x <- c(1, 3, 5, 6)
#' y <- c(7, 8, 9, 12)
#' teste.u(x, y)
#'
#' dados <- data.frame(grupoA = x, grupoB = y)
#' teste.u(dados)
teste.u <- function(..., titulo = "Teste de Mann-Whitney", x = "Grupo", y = "Valor",
ajuda = FALSE, verbose = TRUE) {
grupos <- list(...)
# Verificação antecipada de data.frame
if (length(grupos) == 1 && is.data.frame(grupos[[1]])) {
df <- grupos[[1]]
if (ncol(df) != 2)
stop("O data.frame deve conter exatamente duas colunas numéricas.")
if (!all(sapply(df, is.numeric)))
stop("As duas colunas do data.frame devem ser numéricas.")
nomes <- colnames(df)
grupos <- as.list(df)
}
# Exibir ajuda apenas se solicitado explicitamente
if (ajuda) {
if (verbose) {
message("
Função teste.u()
Descrição:
Realiza o teste de Mann-Whitney (Wilcoxon rank-sum) para comparar dois grupos independentes.
Quando usar:
- Dados não-normais ou ordinais.
- Comparar dois grupos independentes.
- Alternativa não-paramétrica ao teste t.
Exemplos:
x <- c(1, 3, 5, 6)
y <- c(7, 8, 9, 12)
teste.u(x, y)
dados <- data.frame(grupoA = x, grupoB = y)
teste.u(dados)
")
}
return(invisible(NULL))
}
# Verifica pacotes
pacotes <- c("ggplot2", "dplyr")
for (pkg in pacotes) {
if (!requireNamespace(pkg, quietly = TRUE)) {
stop(paste0("O pacote ", pkg, " não está instalado. Instale com install.packages('", pkg, "')"))
}
}
# Se não for dataframe, segue fluxo normal
if (!exists("nomes")) {
if (length(grupos) != 2) {
stop("Forneça dois vetores numéricos ou um data.frame com duas colunas.")
}
nomes_raw <- as.character(match.call(expand.dots = FALSE)$...)
nomes <- sub("^.*\\$", "", nomes_raw)
}
# Verificação
if (!all(sapply(grupos, is.numeric))) stop("Todos os grupos devem ser vetores numéricos.")
# Preparar dados longos
valores <- unlist(grupos)
grupo <- factor(rep(nomes, times = sapply(grupos, length)), levels = nomes)
dados <- data.frame(valor = valores, grupo = grupo)
# Teste Mann-Whitney
resultado <- stats::wilcox.test(grupos[[1]], grupos[[2]], exact = FALSE)
pval <- resultado$p.value
# Resumo estatístico
resumo <- dados |>
dplyr::group_by(grupo) |>
dplyr::summarise(
Mediana = round(median(valor), 2),
Media = round(mean(valor), 2),
Desvio_Padrao = round(sd(valor), 2),
.groups = "drop"
)
if (verbose) {
message("\nResumo estatístico por grupo:")
print(resumo)
}
# Rótulo do p-valor
p_label <- if (pval < 0.001) "p < 0.001" else paste0("p = ", signif(pval, 3))
signif_label <- if (pval < 0.001) "***" else if (pval < 0.01) "**" else if (pval < 0.05) "*" else ""
# Posição para anotação
y_pos <- max(valores, na.rm = TRUE) + 0.1 * diff(range(valores, na.rm = TRUE))
# Gráfico
g <- ggplot2::ggplot(dados, ggplot2::aes(x = grupo, y = valor, fill = grupo)) +
ggplot2::geom_boxplot(alpha = 0.7, outlier.shape = NA) +
ggplot2::geom_jitter(width = 0.1, alpha = 0.5, color = "black") +
ggplot2::annotate("text", x = mean(1:2), y = y_pos, label = signif_label, size = 6) +
ggplot2::theme_minimal() +
ggplot2::scale_fill_brewer(palette = "Set2") +
ggplot2::theme(
legend.position = "none",
axis.text.x = ggplot2::element_text(angle = 45, hjust = 1)
) +
ggplot2::labs(
title = titulo,
subtitle = p_label,
x = x,
y = y
)
print(g)
invisible(list(resumo = resumo, resultado = resultado, grafico = g))
}
teste.u(dados2)
